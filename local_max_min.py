# -*- coding: utf-8 -*-
"""A quick tool to find all local maximums and minimums.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZvaVPk3Yl18CPidXKgqWI0cBrtjoB47S

# A quick tool to find all local maximums and minimums
Jeremy Gillbanks, 2021

##Instructions
"""
import sys, io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import argrelextrema

def peak_finder(df, col, n = 600):# Find local peaks

    # n is the number of points to check before and after

    # Find local peaks
    df = df.groupby((df[col] != df[col].shift()).cumsum().values).first() # Remove the repeat values
    df['min'] = df.iloc[argrelextrema(df[col].values, np.less_equal,
                    order=n)[0]][col]
    df['max'] = df.iloc[argrelextrema(df[col].values, np.greater_equal,
                    order=n)[0]][col]
    return df

if __name__ == '__main__':
    filename = sys.argv[1]
    print('Reading excel file:', filename.split('/')[-1])
    df = pd.read_excel(filename)
    print('Excel file read.')
    columns = list(df.columns)
    print('Columns:', columns)

    v = df[columns[:2]]

    v = v.loc[df[columns[1]].apply(type) == float].copy()

    try:
        v[columns[1]] = pd.to_numeric(v[columns[1]], errors='coerce') # turns all values to floats, NaNs for strings
        v.dropna(inplace = True) # removes the NaNs in data and other text
    except KeyError as e:
        print(type(e), e)
        print(v.columns)

    print('Finding the peaks.')
    df = peak_finder(df = v, col = columns[1])

    # Return CSV with peaks
    output_file = 'data.csv'
    df.to_csv(output_file)
    print('An output file with the max and min data has been saved to your working directory.')
    # Plot all results
    plt.scatter(v[columns[0]], v[columns[1]], c = 'k', s = 1)

    # Plot local minima
    plt.scatter(df[columns[0]], df['min'], c = 'c', s = 5)

    # Plot local maxima
    plt.scatter(df[columns[0]], df['max'], c = 'm', s = 5)

    plt.xlabel(columns[0])
    plt.ylabel(columns[1])

    
    plt.show()